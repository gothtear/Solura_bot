import os
import asyncio
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncpg
from deepseek_sdk import DeepSeekClient


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DB_URL") 
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ DeepSeek
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
deepseek_client = DeepSeekClient(api_key=DEEPSEEK_API_KEY)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FREE_MESSAGE_LIMIT = 10  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
TRIAL_DAYS = 1  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ PRO –Ω–∞ 1 –¥–µ–Ω—å

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_db_pool():
    try:
        pool = await asyncpg.create_pool(DB_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return pool
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {e}")
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    ref_code = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    pool = await create_db_pool()
    if not pool:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        async with pool.acquire() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            user = await connection.fetchrow(
                "SELECT * FROM users WHERE user_id = $1", user_id
            )
            
            is_new_user = False
            if not user:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                pro_until = datetime.now() + timedelta(days=TRIAL_DAYS)
                await connection.execute(
                    "INSERT INTO users (user_id, is_pro, message_count, pro_until, ref_code) VALUES ($1, $2, $3, $4, $5)",
                    user_id, True, 0, pro_until, f"REF{user_id}{random.randint(100,999)}"
                )
                is_new_user = True
                print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {user_id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            if ref_code and ref_code.startswith('REF'):
                referrer = await connection.fetchrow(
                    "SELECT user_id FROM users WHERE ref_code = $1", ref_code
                )
                if referrer and referrer['user_id'] != user_id:
                    # –î–∞–µ–º –±–æ–Ω—É—Å —Ç–æ–º—É, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                    await connection.execute(
                        "UPDATE users SET message_count = GREATEST(0, message_count + 5) WHERE user_id = $1",
                        referrer['user_id']
                    )
                    # –ò –Ω–æ–≤–∏—á–∫—É —Ç–æ–∂–µ –±–æ–Ω—É—Å
                    await connection.execute(
                        "UPDATE users SET message_count = GREATEST(0, message_count + 3) WHERE user_id = $1",
                        user_id
                    )
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await connection.fetchrow(
                "SELECT is_pro, message_count, pro_until FROM users WHERE user_id = $1", user_id
            )
            
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
            "–Ø —Ç–≤–æ–π AI-–ø—Å–∏—Ö–æ–ª–æ–≥. –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —á–µ–º —É–≥–æ–¥–Ω–æ ‚Äî —è –≤—Å–µ–≥–¥–∞ –≤—ã—Å–ª—É—à–∞—é –∏ –ø–æ–¥–¥–µ—Ä–∂—É.\n\n"
        )
        
        if is_new_user:
            welcome_text += (
                f"üéÅ <b>–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π PRO-–ø–µ—Ä–∏–æ–¥ –Ω–∞ {TRIAL_DAYS} –¥–µ–Ω—å!</b>\n"
                "–ü–∏—à–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
            )
        else:
            messages_left = FREE_MESSAGE_LIMIT - user_data['message_count']
            if user_data['is_pro']:
                welcome_text += "üíé <b>–£ —Ç–µ–±—è PRO-–∞–∫–∫–∞—É–Ω—Ç! –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ!</b>\n\n"
            else:
                welcome_text += f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {messages_left}/{FREE_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è\n"
        
        welcome_text += (
            "‚Ä¢ /ref - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n"
            "‚Ä¢ /buy - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É PRO\n"
            "‚Ä¢ /help - –ø–æ–º–æ—â—å\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç..."
        )
        
        await message.answer(welcome_text, parse_mode="HTML")
        
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /ref - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.message(Command("ref"))
async def cmd_ref(message: types.Message):
    user_id = message.from_user.id
    
    pool = await create_db_pool()
    if not pool:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        async with pool.acquire() as connection:
            user = await connection.fetchrow(
                "SELECT ref_code FROM users WHERE user_id = $1", user_id
            )
            
            if user:
                ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user['ref_code']}"
                ref_text = (
                    "üéØ <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã!</b>\n\n"
                    f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
                    "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞:\n"
                    "‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å +5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    "‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç +3 —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!"
                )
                await message.answer(ref_text, parse_mode="HTML")
            else:
                await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /ref: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {FREE_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ PRO: –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "‚Ä¢ /ref - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (+3 —Å–æ–æ–±—â–µ–Ω–∏—è)\n"
        "‚Ä¢ /buy - –æ—Ñ–æ—Ä–º–∏—Ç—å PRO\n"
        "‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "<i>‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ —Ç–µ—Ä–∞–ø–∏–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.</i>"
    )
    await message.answer(help_text, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /buy
@dp.message(Command("buy"))
async def cmd_buy(message: types.Message):
    buy_text = (
        "üöÄ <b>PRO-–ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
        "üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü</b>\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏ @assistantai_gpt\n"
        "–∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://example.com/buy\n\n"
        "<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç</i>"
    )
    await message.answer(buy_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user_text = message.text
    
    if not user_text:
        return
    
    pool = await create_db_pool()
    if not pool:
        await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        async with pool.acquire() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await connection.fetchrow(
                "SELECT is_pro, message_count, pro_until FROM users WHERE user_id = $1", user_id
            )
            
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            is_pro = user['is_pro']
            pro_until = user['pro_until']
            if pro_until and datetime.now() > pro_until:
                is_pro = False
                await connection.execute(
                    "UPDATE users SET is_pro = FALSE WHERE user_id = $1", user_id
                )
                
            message_count = user['message_count']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–º—ã
            danger_keywords = [
                '—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '–ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π', '—É–±–∏—Ç—å —Å–µ–±—è', 
                '—Å—É–∏—Ü–∏–¥', 'suicide', 'harm myself', 'hurt myself', 'end my life',
                '–ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥', '–Ω–∞–≤—Ä–µ–¥–∏—Ç—å —Å–µ–±–µ', '–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å', '–∂–∏—Ç—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è',
                '—Å–≤–µ—Å—Ç–∏ —Å—á–µ—Ç—ã', '–ø–æ–≤–µ—Å–∏—Ç—å—Å—è', '–±—Ä–æ—Å–∏—Ç—å—Å—è', '–ø–æ—Ä–µ–∑—ã', '—Ä–µ–∑–∞—Ç—å —Å–µ–±—è'
            ]

            user_text_lower = user_text.lower()
            if any(keyword in user_text_lower for keyword in danger_keywords):
                safety_response = (
                    "–Ø –æ—á–µ–Ω—å —Ü–µ–Ω—é, —á—Ç–æ —Ç—ã –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π —Å–≤–æ–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏. "
                    "–¢–≤–æ—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã.\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:\n\n"
                    "‚Ä¢ <b>8-800-2000-122</b> - –ö—Ä–∏–∑–∏—Å–Ω–∞—è –ª–∏–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è\n"
                    "‚Ä¢ <b>112</b> - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞\n"
                    "‚Ä¢ @qlindrovalobot - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å\n\n"
                    "–¢—ã –Ω–µ –æ–¥–∏–Ω–æ–∫, –∏ –µ—Å—Ç—å –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å üíô"
                )
                
                await connection.execute(
                    "INSERT INTO messages (user_id, user_message, bot_response) VALUES ($1, $2, $3)",
                    user_id, user_text, "–ë–õ–û–ö: –æ–ø–∞—Å–Ω–∞—è —Ç–µ–º–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"
                )
                
                await message.answer(safety_response, parse_mode="HTML")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if not is_pro and message_count >= FREE_MESSAGE_LIMIT:
                await message.answer(
                    f"‚ùå <b>–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω</b> ({FREE_MESSAGE_LIMIT} –≤ –¥–µ–Ω—å)\n\n"
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO-–≤–µ—Ä—Å–∏—é —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
                    "/buy - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                    "–ò–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –ø–æ /ref –∏ –ø–æ–ª—É—á–∏ +3 —Å–æ–æ–±—â–µ–Ω–∏—è!",
                    parse_mode="HTML"
                )
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            if not is_pro:
                await connection.execute(
                    "UPDATE users SET message_count = message_count + 1 WHERE user_id = $1",
                    user_id
                )
                print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –í—Å–µ–≥–æ: {message_count + 1}/{FREE_MESSAGE_LIMIT}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
            await bot.send_chat_action(chat_id=user_id, action="typing")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek
            try:
                response = await deepseek_client.chat.completions.create(
                    model="deepseek-chat",
                    messages=[{
                        "role": "user", 
                        "content": (
                            "–¢—ã - —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–¥–¥–µ—Ä–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—è–≤–∏ —É—á–∞—Å—Ç–∏–µ. "
                            "–ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º —Å–ª—É—à–∞—Ç–µ–ª–µ–º. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. "
                            "–ò–∑–±–µ–≥–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤. –û—Ç–≤–µ—Ç—å –Ω–∞: " + user_text
                        )
                    }],
                    max_tokens=500,
                    temperature=0.7
                )
                
                ai_response = response.choices[0].message.content
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ DeepSeek API: {e}")
                ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            await connection.execute(
                "INSERT INTO messages (user_id, user_message, bot_response) VALUES ($1, $2, $3)",
                user_id, user_text, ai_response
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(ai_response)
            
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_bot_commands():
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ"),
        types.BotCommand(command="ref", description="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (+5)"),
        types.BotCommand(command="buy", description="–ö—É–ø–∏—Ç—å PRO"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
    ])
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_bot_commands()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
